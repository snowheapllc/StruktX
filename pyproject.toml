[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "struktx-ai"
version = "0.0.1-beta"
description = "A configurable, typed AI framework with swappable LLM, classifier, handlers, and optional memory"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "StruktX Team", email = "team@struktx.dev"}
]
maintainers = [
    {name = "StruktX Team", email = "team@struktx.dev"}
]
keywords = ["ai", "llm", "framework", "chatbot", "nlp", "langchain"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9.0"
dependencies = [
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "pytz>=2024.1",
    "pycountry>=23.12.11",
    "rich>=14.1.0",
    "httpx>=0.28.1",
    "boto3>=1.37.38",
    "botocore>=1.37.38",
]

[project.optional-dependencies]
# LLM dependencies
llm = [
    "langchain-openai>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.2.0",
]

# Vector store support
vector = [
    "upstash-vector>=0.1.0",
    "chromadb>=0.5.0",
    "sentence-transformers>=2.7.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Documentation
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

# All optional dependencies
all = [
    "langchain-openai>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.2.0",
    "upstash-vector>=0.1.0",
    "chromadb>=0.5.0",
    "sentence-transformers>=2.7.0",
]



[project.urls]
Homepage = "https://github.com/snowheapllc/struktx"
Documentation = "https://struktx.snowheap.ai"
Repository = "https://github.com/snowheapllc/struktx.git"
"Bug Tracker" = "https://github.com/snowheapllc/struktx/issues"
"Source Code" = "https://github.com/snowheapllc/struktx"

[project.scripts]
struktx-ai = "strukt.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["strukt"]

[tool.hatch.build.targets.sdist]
include = [
    "/strukt",
    "/strukt/**/*.py",
    "/strukt/**/*.md",
    "/strukt/**/*.txt",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["strukt"]
force_sort_within_sections = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "upstash_vector.*",
    "chromadb.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--asyncio-mode=auto",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["strukt"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
