[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "struktx-ai"
version = "0.0.3-beta12"
description = "A configurable, typed AI framework with swappable LLM, classifier, handlers, and optional memory"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Snowheap LLC", email = "info@snowheap.com"}
]
maintainers = [
    {name = "Snowheap LLC", email = "info@snowheap.com"}
]
keywords = ["ai", "llm", "framework", "chatbot", "nlp", "langchain"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.10.0"
dependencies = [
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "pytz>=2024.1",
    "pycountry>=23.12.11",
    "rich>=14.1.0",
    "httpx>=0.28.1",
    "boto3>=1.37.38",
    "botocore>=1.37.38",
    "inflect>=7.0.0",
    "fastapi>=0.116.1",
    "opentelemetry-sdk>=1.36.0",
    "opentelemetry-api>=1.36.0",
    "opentelemetry-exporter-otlp-proto-http>=1.36.0",
    "opentelemetry-instrumentation-openai>=0.46.2",
    "weave>=0.52.6",
    "mcp[cli]>=1.0.0",
    "lark>=1.2.2",
    "rapidfuzz>=3.14.1",
    "jellyfish>=1.2.0",
    "tavily-python>=0.7.12",
    "langchain-openai>=0.3.30",
    "langchain-core>=0.3.74",
    "langchain-community>=0.3.27",
    "upstash-vector>=0.8.0",
    "chromadb>=1.0.20",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "black>=25.1.0",
    "ruff>=0.12.10",
    "pre-commit>=4.3.0",
]

[project.optional-dependencies]
# LLM dependencies
llm = [
    "langchain-openai>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.2.0",
]

# Vector store support
vector = [
    "upstash-vector>=0.1.0",
    "chromadb>=0.5.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.3.0",
    "pre-commit>=3.0.0",
]

# Documentation
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

# All optional dependencies
all = [
    "langchain-openai>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.2.0",
    "upstash-vector>=0.1.0",
    "chromadb>=0.5.0",
]

# Weave logging support
weave = [
    "weave>=0.52.6",
]


[project.urls]
Homepage = "https://github.com/snowheapllc/struktx"
Documentation = "https://struktx.snowheap.ai"
Repository = "https://github.com/snowheapllc/struktx.git"
"Bug Tracker" = "https://github.com/snowheapllc/struktx/issues"
"Source Code" = "https://github.com/snowheapllc/struktx"

[project.scripts]
struktx-ai = "strukt.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["strukt"]

[tool.hatch.build.targets.sdist]
include = [
    "/strukt",
    "/strukt/**/*.py",
    "/strukt/**/*.md",
    "/strukt/**/*.txt",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''





[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--asyncio-mode=auto",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["strukt"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py310"
line-length = 88
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
]
lint.ignore = [
    "E501",  # line too long, handled by black
]
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "strukt/prompts",
    "strukt/extensions/devices/prompts.py"
]
