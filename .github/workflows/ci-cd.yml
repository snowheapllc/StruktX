name: PyPi Deploy

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: Create virtual environment
      run: uv venv
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          .uv/cache
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv pip install -e ".[dev,all]"
        
    - name: Run linting
      run: |
        uv run black --check .
        uv run isort --check-only .
        uv run flake8 .
        
    - name: Run type checking
      run: uv run mypy strukt/
      
    - name: Run tests
      run: uv run pytest tests/ -v --cov=strukt --cov-report=xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: Create virtual environment
      run: uv venv
        
    - name: Install build dependencies
      run: |
        uv pip install -e ".[dev,all]"
        uv pip install build
        
    - name: Build package
      run: |
        uv run python -m build
        uv run python -m build --wheel
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: Create virtual environment
      run: uv venv
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
        skip-existing: true
        
    - name: Publish to Test PyPI (Optional)
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        packages-dir: dist/
        skip-existing: true

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from pyproject.toml
        VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from git commits
        CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Update release notes
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });
          
          const changelog = '${{ steps.changelog.outputs.changelog }}';
          const version = '${{ steps.changelog.outputs.version }}';
          
          const body = `## StruktX AI v${version}
          
          ### What's New
          ${changelog}
          
          ### Installation
          \`\`\`bash
          pip install struktx-ai[all]
          \`\`\`
          
          ### Quick Start
          \`\`\`bash
          struktx-ai --interactive
          \`\`\`
          
          ### Documentation
          Visit [https://struktx.snowheap.ai](https://struktx.snowheap.ai) for full documentation.
          `;
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: release.id,
            body: body
          });
