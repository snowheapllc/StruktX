# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published, created]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install build ruff
          
      - name: Check Ruff linting
        run: |
          echo "Checking Ruff linting for strukt folder..."
          ruff check strukt/ --config pyproject.toml
          echo "✅ Ruff linting check passed"
          
      - name: Check Ruff formatting
        run: |
          echo "Checking Ruff formatting for strukt folder..."
          ruff format --check strukt/ --config pyproject.toml
          echo "✅ Ruff formatting check passed"
          
      - name: Build release distributions
        run: |
          # Build the package after all checks pass
          python -m build
          echo "Built distributions:"
          ls -la dist/

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Using PYPI_API_TOKEN for deployment to snowheapllc/struktx-ai

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
          
      - name: Debug distributions
        run: |
          echo "Retrieved distributions:"
          ls -la dist/

      - name: Debug PyPI credentials
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Checking if PYPI_API_TOKEN is set..."
          if [ -n "$PYPI_TOKEN" ]; then
            echo "✅ PYPI_API_TOKEN is set (length: ${#PYPI_TOKEN})"
            echo "Token starts with: ${PYPI_TOKEN:0:10}..."
          else
            echo "❌ PYPI_API_TOKEN is not set"
          fi
          
      - name: Publish release distributions to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          password: ${{ env.PYPI_TOKEN }}
          username: __token__
          verbose: true
